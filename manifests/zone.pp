define dns::zone (
  $soa = "${::fqdn}.",
  $soa_email = "root.${::fqdn}.",
  $zone_ttl = '604800',
  $zone_refresh = '604800',
  $zone_retry = '86400',
  $zone_expire = '2419200',
  $zone_minimum = '604800',
  $nameservers = [ $::fqdn ],
  $reverse = false,
  $zone_type = 'master',
  $allow_transfer = [],
  $slave_masters = undef,
  $zone_notify = false,
  $ensure = present
) {

  validate_array($allow_transfer)

  $cfg_dir = $dns::server::params::cfg_dir

  $zone = $reverse ? {
    true    => "${name}.in-addr.arpa",
    default => $name
  }

  $zone_dir = "${cfg_dir}/zones"
  $zone_file = "${zone_dir}/db.${name}"
  $zone_file_data = "${zone_file}.data"

  if $ensure == absent {
    file { $zone_file:
      ensure => absent,
    }
  } else {

      # Splitting zone file on two parts: zone-soa (soa record) and zone-data (all other records).
      # This is to update zone_serial only by need (then zone-data updated).

      exec { "soa-${zone}":
        command     => template("${module_name}/zone_soa_exec.erb"),
        path        => ["/bin", "/sbin", "/usr/bin", "/usr/sbin"],
        refreshonly => true,
        require     => Class['dns::server::install'],
        notify      => Class['dns::server::service'],
      }
      # Set correct rights on file generated by exec{soa-$zone:}
      file { $zone_file:
        ensure    => file,
        owner     => $dns::owner,
        group     => $dns::group,
        mode      => 0644,
	require	  => Exec["soa-${zone}"],
      }

      # Generate ${zone_name}.data file for static zones and request refresh exec on changes
      concat { $zone_file_data:
        owner   => $dns::owner,
        group   => $dns::group,
        mode    => '644',
        require => Class['dns::server::install'],
        notify  => Exec["soa-${zone}"],
      }
      concat::fragment{"db.${zone}.data-header":
        target  => $zone_file_data,
        order   => 1,
        content => template("${module_name}/zone_data_header.erb")
      }
  }

  # Include Zone in named.conf.local
  concat::fragment{"named.conf.local.${name}.include":
    ensure  => $ensure,
    target  => "${cfg_dir}/named.conf.local",
    order   => 3,
    content => template("${module_name}/zone.erb")
  }

}
